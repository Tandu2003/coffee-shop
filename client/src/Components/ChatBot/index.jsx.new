import { useState, useEffect, useRef, useContext } from 'react';
import './ChatBot.scss';
import AuthContext from '../../Context/AuthProvider';
// Use message icon for chat button and logo for bot avatar
import messageIcon from '../../Assets/svg/message-icon.svg';
import botAvatar from '../../Assets/img/journeyLogo.png';
import userAvatar from '../../Assets/img/user-avatar.png';

const ChatBot = () => {
  // Get authentication state from context
  const { auth, loading } = useContext(AuthContext);
  const [isOpen, setIsOpen] = useState(false);
  const [showChatbot, setShowChatbot] = useState(true); // Always show chatbot for all users
  const [messages, setMessages] = useState(() => {
    // Load messages from localStorage or use default
    const savedMessages = localStorage.getItem('chatBotMessages');
    return savedMessages ? JSON.parse(savedMessages) : [
      { 
        sender: 'bot', 
        text: 'Xin ch√†o! T√¥i l√† OKBF Assistant, tr·ª£ l√Ω AI chuy√™n v·ªÅ c√† ph√™. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?',
        timestamp: new Date()
      }
    ];
  });
  const [inputValue, setInputValue] = useState('');
  const chatRef = useRef(null);
  const messagesEndRef = useRef(null);
  
  // Products for recommendations
  const coffeeProducts = [
    { id: 1, name: "C√† Ph√™ Rang ƒê·∫≠m", description: "H∆∞∆°ng v·ªã ƒë·∫≠m ƒë√†", price: 79000, image: "../../Assets/img/coffee-dark.png", slug: "dark-roast-coffee" },
    { id: 2, name: "C√† Ph√™ Rang V·ª´a", description: "C√¢n b·∫±ng v√† m∆∞·ª£t m√†", price: 75000, image: "../../Assets/img/coffee-medium.png", slug: "medium-roast-coffee" },
    { id: 3, name: "C√† Ph√™ Rang Nh·∫π", description: "T∆∞∆°i s√°ng v√† ƒë·∫ßy s·ª©c s·ªëng", price: 72000, image: "../../Assets/img/coffee-medium-dark.png", slug: "light-roast-coffee" }
  ];

  // Auto-scroll to bottom of chat
  useEffect(() => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
    
    // Save messages to localStorage
    localStorage.setItem('chatBotMessages', JSON.stringify(messages));
  }, [messages]);
  
  // Always show chatbot for all users regardless of login status
  useEffect(() => {
    setShowChatbot(true);
  }, []);

  const toggleChat = () => {
    setIsOpen(!isOpen);
  };

  const handleInputChange = (e) => {
    setInputValue(e.target.value);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    // Add user message
    const userMessage = { sender: 'user', text: inputValue, timestamp: new Date() };
    setMessages(prevMessages => [...prevMessages, userMessage]);
    setInputValue('');

    // Process user query and generate response
    setTimeout(() => {
      const botResponse = processBotResponse(inputValue);
      setMessages(prevMessages => [...prevMessages, botResponse]);
    }, 1000);
  };

  const processBotResponse = (userInput) => {
    const input = userInput.toLowerCase();
    
    // Check for Vietnamese greetings
    if (input.includes('xin ch√†o') || input.includes('ch√†o') || input.includes('hi') || input.includes('hello')) {
      return { 
        sender: 'bot', 
        text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω OKBF. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m lo·∫°i c√† ph√™ ph√π h·ª£p nh·∫•t v·ªõi kh·∫©u v·ªã c·ªßa b·∫°n!',
        timestamp: new Date()
      };
    }
    
    // Check for help request
    if (input.includes('gi√∫p') || input.includes('g·ª£i √Ω') || input.includes('ƒë·ªÅ xu·∫•t') || input.includes('suggest')) {
      return { 
        sender: 'bot', 
        text: 'T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n t√¨m c√† ph√™ ph√π h·ª£p! B·∫°n th√≠ch c√† ph√™ rang ƒë·∫≠m, v·ª´a hay nh·∫π? Ho·∫∑c b·∫°n ƒëang t√¨m lo·∫°i c√† ph√™ ph√π h·ª£p cho espresso, cold brew hay pour-over?',
        timestamp: new Date()
      };
    }
    
    // Check for roast preferences
    if (input.includes('ƒë·∫≠m') || input.includes('dark')) {
      return {
        sender: 'bot',
        text: 'Nh·ªØng ng∆∞·ªùi y√™u th√≠ch c√† ph√™ rang ƒë·∫≠m ƒë√°nh gi√° cao h∆∞∆°ng v·ªã ƒë·∫≠m ƒë√†! C√† ph√™ Rang ƒê·∫≠m ƒë·∫∑c tr∆∞ng c·ªßa ch√∫ng t√¥i c√≥ v·ªã ƒë·∫ßy ƒë·∫∑n v·ªõi h∆∞∆°ng chocolate ƒëen, caramel v√† k·∫øt th√∫c ƒë·∫ßy kh√≥i. Ho√†n h·∫£o cho nh·ªØng ai th√≠ch m·ªôt t√°ch c√† ph√™ ƒë·∫≠m ƒë√† v·ªõi ƒë·ªô axit th·∫•p.',
        recommendations: [coffeeProducts[0]],
        timestamp: new Date()
      };
    }
    
    if (input.includes('v·ª´a') || input.includes('medium')) {
      return {
        sender: 'bot',
        text: 'C√† ph√™ rang v·ª´a mang ƒë·∫øn s·ª± c√¢n b·∫±ng ho√†n h·∫£o! C√† ph√™ Rang V·ª´a c·ªßa ch√∫ng t√¥i c√≥ h∆∞∆°ng v·ªã m∆∞·ª£t m√†, c√¢n ƒë·ªëi v·ªõi c√°c n·ªët h∆∞∆°ng ƒë∆∞·ªùng n√¢u, h·∫°t v√† m·ªôt ch√∫t d∆∞ v·ªã c·ªßa qu·∫£ m·ªçng. ƒê√¢y l√† lo·∫°i c√† ph√™ linh ho·∫°t nh·∫•t, ph√π h·ª£p v·ªõi m·ªçi ph∆∞∆°ng ph√°p pha.',
        recommendations: [coffeeProducts[1]],
        timestamp: new Date()
      };
    }
    
    if (input.includes('nh·∫π') || input.includes('light')) {
      return {
        sender: 'bot',
        text: 'C√† ph√™ rang nh·∫π l√†m n·ªïi b·∫≠t c√°c ƒë·∫∑c t√≠nh ƒë·ªôc ƒë√°o c·ªßa h·∫°t c√† ph√™! C√† ph√™ Rang Nh·∫π c·ªßa ch√∫ng t√¥i c√≥ ƒë·ªô acid s√°ng v·ªõi h∆∞∆°ng cam qu√Ωt r√µ r·ªát, h∆∞∆°ng hoa v√† k·∫øt th√∫c s·∫°ch s·∫Ω. R·∫•t ph√π h·ª£p cho ph∆∞∆°ng ph√°p pour-over v√† drip brewing.',
        recommendations: [coffeeProducts[2]],
        timestamp: new Date()
      };
    }
    
    // Check for brewing methods
    if (input.includes('espresso') || input.includes('latte') || input.includes('cappuccino')) {
      return {
        sender: 'bot',
        text: 'ƒê·ªëi v·ªõi c√°c lo·∫°i ƒë·ªì u·ªëng d·ª±a tr√™n espresso, t√¥i khuy√™n b·∫°n n√™n d√πng C√† ph√™ Rang ƒê·∫≠m c·ªßa ch√∫ng t√¥i. N√≥ t·∫°o ra m·ªôt l·ªõp crema phong ph√∫ v√† k·∫øt h·ª£p r·∫•t t·ªët v·ªõi s·ªØa trong latte v√† cappuccino.',
        recommendations: [coffeeProducts[0]],
        timestamp: new Date()
      };
    }
    
    if (input.includes('cold brew') || input.includes('ƒë√°') || input.includes('iced')) {
      return {
        sender: 'bot',
        text: 'ƒê·ªëi v·ªõi cold brew v√† c√† ph√™ ƒë√°, C√† ph√™ Rang V·ª´a l√† m·ªôt l·ª±a ch·ªçn tuy·ªát v·ªùi. N√≥ t·∫°o ra m·ªôt lo·∫°i cold brew m∆∞·ª£t m√†, √≠t acid v·ªõi h∆∞∆°ng chocolate v√† caramel n·ªïi b·∫≠t ngay c·∫£ khi ·ªü nhi·ªát ƒë·ªô l·∫°nh.',
        recommendations: [coffeeProducts[1]],
        timestamp: new Date()
      };
    }
    
    if (input.includes('pour over') || input.includes('drip') || input.includes('filter') || input.includes('phin')) {
      return {
        sender: 'bot',
        text: 'ƒê·ªëi v·ªõi ph∆∞∆°ng ph√°p pour-over, phin v√† drip brewing, h√£y th·ª≠ C√† ph√™ Rang Nh·∫π c·ªßa ch√∫ng t√¥i ƒë·ªÉ tr·∫£i nghi·ªám to√†n b·ªô d·∫£i h∆∞∆°ng v·ªã tinh t·∫ø m√† nh·ªØng ph∆∞∆°ng ph√°p n√†y c√≥ th·ªÉ chi·∫øt xu·∫•t.',
        recommendations: [coffeeProducts[2]],
        timestamp: new Date()
      };
    }
    
    // Default response
    return {
      sender: 'bot',
      text: 'T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n kh√°m ph√° lo·∫°i c√† ph√™ ph√π h·ª£p! B·∫°n mu·ªën t√¥i g·ª£i √Ω d·ª±a tr√™n m·ª©c ƒë·ªô rang (nh·∫π, v·ª´a, ƒë·∫≠m), ph∆∞∆°ng ph√°p pha (espresso, pour-over, cold brew), hay h∆∞∆°ng v·ªã (ng·ªçt, tr√°i c√¢y, h·∫°t)?',
      timestamp: new Date()
    };
  };

  const formatTime = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <>
      {showChatbot && (
        <div className="chat-bot-container">
          <div 
            className={`chat-bot-button ${isOpen ? 'open' : ''}`} 
            onClick={toggleChat}
          >
            <img src={messageIcon} alt="AI Chat" className="message-icon" />
          </div>
          
          {isOpen && (
            <div className="chat-bot-panel" ref={chatRef}>
              <div className="chat-header">
                <div className="chat-title">
                  <img src={botAvatar} alt="Bot" className="bot-avatar" />
                  <h3>OKBF Assistant</h3>
                </div>
                <div className="chat-controls">
                  <button 
                    className="clear-button" 
                    title="Clear chat history"
                    onClick={() => {
                      setMessages([
                        { 
                          sender: 'bot', 
                          text: 'L·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?',
                          timestamp: new Date()
                        }
                      ]);
                    }}
                  >
                    <span role="img" aria-label="Clear">üóëÔ∏è</span>
                  </button>
                  <button className="close-button" onClick={() => setIsOpen(false)}>√ó</button>
                </div>
              </div>
              
              <div className="chat-messages">
                {messages.map((msg, index) => (
                  <div 
                    key={index} 
                    className={`message ${msg.sender === 'bot' ? 'bot-message' : 'user-message'}`}
                  >
                    <div className="message-avatar">
                      <img src={msg.sender === 'bot' ? botAvatar : userAvatar} alt={msg.sender} />
                    </div>
                    <div className="message-content">
                      <div className="message-text">{msg.text}</div>
                      
                      {/* Product recommendations */}
                      {msg.recommendations && (
                        <div className="product-recommendations">
                          {msg.recommendations.map(product => (
                            <div key={product.id} className="recommended-product">
                              <img src={product.image} alt={product.name} />
                              <div className="product-info">
                                <h4>{product.name}</h4>
                                <p>{product.description}</p>
                                <span className="product-price">{product.price.toLocaleString()}‚Ç´</span>
                                <button 
                                  className="view-product-btn"
                                  onClick={() => {
                                    window.location.href = `/coffee-shop/${product.slug}`;
                                    setIsOpen(false);
                                  }}
                                >
                                  Xem
                                </button>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                      
                      <div className="message-time">{formatTime(msg.timestamp)}</div>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
              
              <form className="chat-input" onSubmit={handleSubmit}>
                <input
                  type="text"
                  value={inputValue}
                  onChange={handleInputChange}
                  placeholder="Nh·∫≠p tin nh·∫Øn..."
                />
                <button type="submit">G·ª≠i</button>
              </form>
            </div>
          )}
        </div>
      )}
    </>
  );
};

export default ChatBot;
